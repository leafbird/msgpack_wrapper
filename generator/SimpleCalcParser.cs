//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 SimpleCalc.g3 2014-03-18 00:00:14

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  AntlrTest 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class SimpleCalcParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "DIGIT", "DIV", "MINUS", "MULT", "NUMBER", "PLUS", "WHITESPACE"
	};
	public const int EOF=-1;
	public const int DIGIT=4;
	public const int DIV=5;
	public const int MINUS=6;
	public const int MULT=7;
	public const int NUMBER=8;
	public const int PLUS=9;
	public const int WHITESPACE=10;

	public SimpleCalcParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SimpleCalcParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SimpleCalcParser.tokenNames; } }
	public override string GrammarFileName { get { return "SimpleCalc.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_expr();
	partial void LeaveRule_expr();
	// $ANTLR start "expr"
	// SimpleCalc.g3:22:8: public expr : term ( ( PLUS | MINUS ) term )* ;
	[GrammarRule("expr")]
	public AstParserRuleReturnScope<object, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 1);
		TraceIn("expr", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set2 = default(IToken);
		AstParserRuleReturnScope<object, IToken> term1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> term3 = default(AstParserRuleReturnScope<object, IToken>);

		object set2_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(22, 47);
		try
		{
			// SimpleCalc.g3:22:13: ( term ( ( PLUS | MINUS ) term )* )
			DebugEnterAlt(1);
			// SimpleCalc.g3:22:15: term ( ( PLUS | MINUS ) term )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(22, 15);
			PushFollow(Follow._term_in_expr121);
			term1=term();
			PopFollow();

			adaptor.AddChild(root_0, term1.Tree);
			DebugLocation(22, 20);
			// SimpleCalc.g3:22:20: ( ( PLUS | MINUS ) term )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1==MINUS||LA1_1==PLUS))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SimpleCalc.g3:22:22: ( PLUS | MINUS ) term
					{
					DebugLocation(22, 22);

					set2=(IToken)input.LT(1);
					if (input.LA(1)==MINUS||input.LA(1)==PLUS)
					{
						input.Consume();
						adaptor.AddChild(root_0, (object)adaptor.Create(set2));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(22, 40);
					PushFollow(Follow._term_in_expr136);
					term3=term();
					PopFollow();

					adaptor.AddChild(root_0, term3.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 1);
			LeaveRule("expr", 1);
			LeaveRule_expr();
		}
		DebugLocation(22, 47);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_term();
	partial void LeaveRule_term();
	// $ANTLR start "term"
	// SimpleCalc.g3:24:1: term : factor ( ( MULT | DIV ) factor )* ;
	[GrammarRule("term")]
	private AstParserRuleReturnScope<object, IToken> term()
	{
		EnterRule_term();
		EnterRule("term", 2);
		TraceIn("term", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set5 = default(IToken);
		AstParserRuleReturnScope<object, IToken> factor4 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> factor6 = default(AstParserRuleReturnScope<object, IToken>);

		object set5_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "term");
		DebugLocation(24, 44);
		try
		{
			// SimpleCalc.g3:24:9: ( factor ( ( MULT | DIV ) factor )* )
			DebugEnterAlt(1);
			// SimpleCalc.g3:24:11: factor ( ( MULT | DIV ) factor )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(24, 11);
			PushFollow(Follow._factor_in_term152);
			factor4=factor();
			PopFollow();

			adaptor.AddChild(root_0, factor4.Tree);
			DebugLocation(24, 18);
			// SimpleCalc.g3:24:18: ( ( MULT | DIV ) factor )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==DIV||LA2_1==MULT))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// SimpleCalc.g3:24:20: ( MULT | DIV ) factor
					{
					DebugLocation(24, 20);

					set5=(IToken)input.LT(1);
					if (input.LA(1)==DIV||input.LA(1)==MULT)
					{
						input.Consume();
						adaptor.AddChild(root_0, (object)adaptor.Create(set5));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(24, 35);
					PushFollow(Follow._factor_in_term166);
					factor6=factor();
					PopFollow();

					adaptor.AddChild(root_0, factor6.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("term", 2);
			LeaveRule("term", 2);
			LeaveRule_term();
		}
		DebugLocation(24, 44);
		} finally { DebugExitRule(GrammarFileName, "term"); }
		return retval;

	}
	// $ANTLR end "term"

	partial void EnterRule_factor();
	partial void LeaveRule_factor();
	// $ANTLR start "factor"
	// SimpleCalc.g3:26:1: factor : NUMBER ;
	[GrammarRule("factor")]
	private AstParserRuleReturnScope<object, IToken> factor()
	{
		EnterRule_factor();
		EnterRule("factor", 3);
		TraceIn("factor", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NUMBER7 = default(IToken);

		object NUMBER7_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "factor");
		DebugLocation(26, 17);
		try
		{
			// SimpleCalc.g3:26:9: ( NUMBER )
			DebugEnterAlt(1);
			// SimpleCalc.g3:26:11: NUMBER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(26, 11);
			NUMBER7=(IToken)Match(input,NUMBER,Follow._NUMBER_in_factor180); 
			NUMBER7_tree = (object)adaptor.Create(NUMBER7);
			adaptor.AddChild(root_0, NUMBER7_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("factor", 3);
			LeaveRule("factor", 3);
			LeaveRule_factor();
		}
		DebugLocation(26, 17);
		} finally { DebugExitRule(GrammarFileName, "factor"); }
		return retval;

	}
	// $ANTLR end "factor"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _term_in_expr121 = new BitSet(new ulong[]{0x242UL});
		public static readonly BitSet _set_in_expr125 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _term_in_expr136 = new BitSet(new ulong[]{0x242UL});
		public static readonly BitSet _factor_in_term152 = new BitSet(new ulong[]{0xA2UL});
		public static readonly BitSet _set_in_term156 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _factor_in_term166 = new BitSet(new ulong[]{0xA2UL});
		public static readonly BitSet _NUMBER_in_factor180 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  AntlrTest 
